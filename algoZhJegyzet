Ezt jó tudni szerintem
fejelemesnél:
•	ha nem ciklikus NULL ig megy
•	Ha ciklikus p:= f
o	amíg p->next != p és a fejelemet skippelni kell (p == f)!!


Kiláncolás / beláncolás
•	kiláncolás
E2
p->prev->next = p->next
p->next->prev = p->prev
s = p
p = p->prev 
delelte s

E1
prev ptr kell 
prev := p
p := p->next 
prev->next = p->next
s := p
delete s

H2C
p->prev->next := p->next
p->next->prev := p->prev
s := p
p := p->prev
delete s




•	beláncolás
E1
q->next := p->next             1 2 3 p=2  q->next = 3, p->next = q legyen a q 4 így 1 2 4 3
p->next := q

E2
p->next->prev = q
q->next := p->next
p->next := q
q->prev := p

H1L
p = f
q->next = p->next
p->next = q
Listák és listaelemek felépítése
•	láncolt lista egy eleme két, úgymond kötelező részből áll, ez a "key" és a "next"
o	De lehet létrehozni fejelemest H (f) és két irányú listát E2
o	UML-diagramban így írnánk: 
	+ key : T
	+ next : E1*

•	a pointer stacken él míg amire mutat a heapen

•	lista elem == Node 

•	heapen foglalás  „p:= new E1”

•	egy pointer lérehozásakor a semmibe mutat nem NULL-ra

•	p->next->key azt jelneti p következő elemnének a kulcsa. Szigorúan akkor lehet ilyet csinálni ha tudjuk hogy nem null a next

•	copy constructortát nem tudjuk mennyi a futási ideje

•	Ez helyes jelölés (E1<T>)*  de alap esteben mindig oda érjük a „T” E1*

•	Iterált, mert egyazon alaptípus (ami persze nem szükségképpen primitív, sőt láncolt lista is lehet) felett értelmezett, csupa azonos típusú elemeket tartalmaz 

•	Lineáris, mert jól definiálható sorrendben végig lehet menni az elemein, azaz kvázi indexelhető (ez a rendezhetőségtől független fogalom) 

•	Rekurzív, mert a típus definíciója önmagára hivatkozik
Tulajdonságai
A láncolt lista egy elemének key mezőjének típusa, ahogy írtuk "T". Ez egy általános, közelebbről nem specifikált típus. Használhatjuk akár a generikus paraméteres jelölést, azaz E1<S>, ekkor key : S és next : (E1<S>)* lesz igaz. Viszont ezt a jelölést felesleges lenne végigvinni egyértelmű esetekben, ezért nem is szoktuk, mindenhova "odaértjük" a <T>-t
Előnyei-hátrányai
•	Előnye
o	A listabejárás olcsó
o	nincs fix mérete kis kihasználtság esetén nem pazarló potenciálisan végtelen kapacitású
o	nem kell át méretezni, ha be akarunk szúrni egy elemet, nem úgy mint a tömbnél
o	ugyan ez elem kivételénél nem kel le shiftelni az egészet

•	hátrány:
o	Ugyan egyesével bejárni ugyanúgy lineáris idő, mint a tömb esetén, de egy specifikus i-edik indexen levő elemet kiválasztani (ahol i eleme [1..n]), a next mentén való i-1 ugrásból áll, azaz az indexelés nem konstans, hanem lineáris műveletigényű művelet. Ezért gyakorlatilag sosem használjuk.

o	A tömbös ábrázoláshoz képest egy n méretű lista nem n * elemméret tárhelyet foglal, elemenként van egy kis overhead

Listák típusai
három legfőbb:
•	Fejelemes H, vagy sem 

•	Kétirányú 2, vagy sem 

•	Ciklikus    C, vagy sem
Felsorolva:
//l = list , S= simple
•	egy irányú S1L (key,next)
•	egy irányú ciklikus 1CL (key,next a next a legvégén nem NULL ra hanem az első -elemre mutat) 
•	egy irányú fejelemes H1L (biztos lesz benne egy elem)
•	egy irányú fejelemes ciklikus H1LC 

•	két irányú S2L (prev,key,next)
•	két irányú ciklikus 2CL (prev,key,next, a next nem nullra hanem az első elemre mutat a végén)
•	két irányú fejelemes H2L (prev,key,next ) (biztos lesz benne egy elem)
•	két irányú fejelemes ciklukus H2CL (prev,key,next)

H, 2, C – rendezettség, többszörösség, végelemesség
Lehet még egy lista rendezett vagy rendezetlen, de ez nem külön listatípus, hiszen ez szemantikai kategória többszörösség, végelemesség?? azt írja nem kell

H A fejelemest listának a fejelemét mindig egy ciklikus listában átugorjuk és f el jelöljük a fejelemes listát, sose lehet nullptr és igazából egy n elemű listának n+1 lesz a mérete a fejelem miatt. A fejelem egy két irányú listában a prevje az utolsó elemre mutat és a nextje a következőre onnan tudjuk hogy az összes elemet töröltük egy fejelemes listából hogy a fejelem saját magára mutat p->next = p
2= két irányú ezzel az előző elemre is hivatkozhatunk és a következőre is pl p->next->perv  = p-> prev //feltételezem hogy van next
C= ciklikus ebből kifolyólag csak akkor érünk a végére ha az utolsó elem már nem az elsőre hanem egy NULL ra mutat ami az első helyén van, ha fejelemes a fejelem is része a körnek ilyenkor nem lesz NULL mert a fejelem soha a büdös kibaszott életbe nem lehet NULL gec és ezért ha p->next = p vel akkor önmagára mutat vagyis megállhatunk

Listaelemek típusai
•	E1, E2, E1C, E2C
egy irányú van next és key
két irányú van prev next key
egy irányú ciklikus van key és next az utolsó next az első elemre mutat
két irányú ciklikus van prev next key az első elem az utolsóra az utolsó az elsőre mutat

•	Konstruktorok

E1
 
E2
 
    +prev : E2*

E1C
 

E2C
 
    +prev : E2C*

Pointerek
•	NULL vs nem definiált
NULL mi adjuk ki mi alap esetben nem definiált egy mutató értéke a NULL mindig tegyük ki nem szabad hogy nem definiált értéke legyen egy poniternek mert súlyos veszélyeket rejt magába
new / delete – mikor hogy
törölni nekünk kell „delete p”  Ezután maga a p pointer továbbra is létezni fog (a szülő blokk végéig), de értéke definiálatlan lesz
A dinamikus memórián új területet foglalni, annak értéket adni pedig a "p := new E1"-gyel lehet. lefuttatja az E1 típus konstruktorát, majd visszatér a memóriacímmel és azt p-nek adja. p ezutántól egy "nyíl" lesz, ami egy névtelen, de kétségtelenül lefoglalt és p segítségével elérhető memóriacellá(k)ra mutat
hogyha van egy k értékem amit bele szeretnék majd fűzni a láncolt listámba akkor fel kell vennem egy p := new E1 és ennek a p->key = k be kell állítani a kt így már hozzá lehet láncolni 

Memóriaszivárgás
Ha van egy pointered és azt te nem törlöd és elveszíted a rámutató részt akkor az memória szivárgásnak minősül pl ha p->next = p->next és itt a p-t nem törlöd a memórióba ugyan úgy megmarad a lefoglalt terület ezért ki kell törölni delete s el mert s egy alisa lesz ennek a p nek 


Előrenézés – két pointer / egy pointer
Ha kell a prev és nekünk E1 ünk van akkor kell egy pointer ami az előzőt nézi pl prev = p és utána léptetem pt akkor el van mentve p értéke ha dolgozni kéne ele pl átláncolni stb
Mikor kell nullcheck
Ha nem fejelemes a lista, a next vizsálatakor
Mikor kell referencia
hogyha nem fejelemes és dereferálni szeretnénk az értékét
Műveletigények
ez példa nélkül nem fog menni de majd nézek
Tömbös reprezentáció
na engedd el xd
Egyáltalán…, a tömbök!
de minek xd?
Maximumkiválasztó és beszúró rendezések (tömbös esettel való összehasonlítással együtt)
Összefuttatás
Nem „kell”, de erősen javasolt vizualizálni

 

Keresés: ez egy egy irányú lista (key,next)
 

rendezett listában
keresés


Lista elejére való beszúrás:
 
itt javítva látható mivel, ha l az NULL akkor a p-next je NULL lesz és nekünk az megfelelő
 

 
Itt egy rendezett listáról beszélünk már:
 

Itt annyi a különbség hogy a q ba ami a konstruktorba van már benne van a k a keybe és a HA feltételnél megnézem hogy az első elem nagyobb a mint a beszúrandó és ebből fog következni az else ág ami miatt a p az biztos nem null így p->nextet nézhetem nyugodtan 
 

Hogyan fordíts meg egy egyszerű listát?
 

Fejelemes beszúrás itt biztosra vehetjük hogy az első elem létezik, és nem hordoz figyelembe veendő adatot 
 
 
Kiszámolós játék



















beszúró rendezés
 
 

A NAGYÁGYÚK
unio,max ppt be nézd
